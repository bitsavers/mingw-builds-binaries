diff --git a/library/config-win.sh b/library/config-win.sh
index 4f9a8f0..4580e81 100644
--- a/library/config-win.sh
+++ b/library/config-win.sh
@@ -101,6 +101,8 @@ function func_test_installed_packages {
 		texinfo
 		autogen
 		dejagnu
+		pkgconf
+		dos2unix
 	)
 
 	echo "--> installing required packages..."
diff --git a/library/config.sh b/library/config.sh
index bcd89a3..c7f98af 100644
--- a/library/config.sh
+++ b/library/config.sh
@@ -111,7 +111,7 @@ FETCH_MODE=no
 UPDATE_SOURCES=no
 BUILD_ARCHITECTURE=
 EXCEPTIONS_MODEL=
-USE_MULTILIB=no
+USE_MULTILIB=yes
 STRIP_ON_INSTALL=yes
 BOOTSTRAPING=yes
 BOOTSTRAPINGALL=no
@@ -190,10 +190,10 @@ esac
 
 # **************************************************************************
 
-echo -n "-> Checking for installed packages... "
-func_test_installed_packages
-[[ $? == 1 ]] && exit 1
-echo "done"
+#echo -n "-> Checking for installed packages... "
+#func_test_installed_packages
+#[[ $? == 1 ]] && exit 1
+#echo "done"
 
 # **************************************************************************
 
diff --git a/library/functions.sh b/library/functions.sh
index 8ef7751..e3d3284 100644
--- a/library/functions.sh
+++ b/library/functions.sh
@@ -438,7 +438,6 @@ function func_download {
 					--tries=$_WGET_TRIES \
 					--timeout=$_WGET_TIMEOUT \
 					--wait=$_WGET_WAIT \
-					--no-check-certificate \
 					$_url -O $_lib_name > $_log_name 2>&1
 				_result=$?
 			}
diff --git a/patches/binutils/0110-binutils-mingw-gnu-print.patch b/patches/binutils/0110-binutils-mingw-gnu-print.patch
index 91dcd7e..2adda2a 100644
--- a/patches/binutils/0110-binutils-mingw-gnu-print.patch
+++ b/patches/binutils/0110-binutils-mingw-gnu-print.patch
@@ -1,19 +1,8 @@
-diff -urN binutils-2.38.orig/binutils/dwarf.c binutils-2.38/binutils/dwarf.c
---- binutils-2.38.orig/binutils/dwarf.c	2022-01-22 13:14:07.000000000 +0100
-+++ binutils-2.38/binutils/dwarf.c	2022-04-01 16:20:13.920951900 +0200
-@@ -218,7 +218,7 @@
- }
- 
- #if SIZEOF_LONG_LONG > SIZEOF_LONG
--# ifndef __MINGW32__
-+# if !defined(__MSVCRT__) || defined(__USE_MINGW_ANSI_STDIO)
- #  define DWARF_VMA_FMT		"ll"
- #  define DWARF_VMA_FMT_LONG	"%16.16llx"
- # else
-diff -urN binutils-2.38.orig/binutils/strings.c binutils-2.38/binutils/strings.c
---- binutils-2.38.orig/binutils/strings.c	2022-01-22 13:14:07.000000000 +0100
-+++ binutils-2.38/binutils/strings.c	2022-04-01 16:23:19.687330400 +0200
-@@ -617,7 +617,7 @@
+diff --git a/binutils/strings.c b/binutils/strings.c
+index 44a8e1da644..4010829dc49 100644
+--- a/binutils/strings.c
++++ b/binutils/strings.c
+@@ -617,7 +617,7 @@ print_filename_and_address (const char * filename, file_ptr address)
      case 8:
        if (sizeof (address) > sizeof (long))
  	{
@@ -22,7 +11,7 @@ diff -urN binutils-2.38.orig/binutils/strings.c binutils-2.38/binutils/strings.c
  	  printf ("%7llo ", (unsigned long long) address);
  #else
  	  printf ("%7I64o ", (unsigned long long) address);
-@@ -630,7 +630,7 @@
+@@ -630,7 +630,7 @@ print_filename_and_address (const char * filename, file_ptr address)
      case 10:
        if (sizeof (address) > sizeof (long))
  	{
@@ -31,7 +20,7 @@ diff -urN binutils-2.38.orig/binutils/strings.c binutils-2.38/binutils/strings.c
  	  printf ("%7llu ", (unsigned long long) address);
  #else
  	  printf ("%7I64d ", (unsigned long long) address);
-@@ -643,7 +643,7 @@
+@@ -643,7 +643,7 @@ print_filename_and_address (const char * filename, file_ptr address)
      case 16:
        if (sizeof (address) > sizeof (long))
  	{
@@ -40,10 +29,11 @@ diff -urN binutils-2.38.orig/binutils/strings.c binutils-2.38/binutils/strings.c
  	  printf ("%7llx ", (unsigned long long) address);
  #else
  	  printf ("%7I64x ", (unsigned long long) address);
-diff -urN binutils-2.38.orig/gas/as.h binutils-2.38/gas/as.h
---- binutils-2.38.orig/gas/as.h	2022-01-22 13:14:08.000000000 +0100
-+++ binutils-2.38/gas/as.h	2022-04-01 16:24:32.374816400 +0200
-@@ -413,10 +413,10 @@
+diff --git a/gas/as.h b/gas/as.h
+index 14a768f8889..b1f056f115a 100644
+--- a/gas/as.h
++++ b/gas/as.h
+@@ -433,14 +433,14 @@ typedef struct _pseudo_type pseudo_typeS;
  
  #define PRINTF_LIKE(FCN) \
    void FCN (const char *format, ...) \
@@ -53,13 +43,19 @@ diff -urN binutils-2.38.orig/gas/as.h binutils-2.38/gas/as.h
    void FCN (const char *file, unsigned int line, const char *format, ...) \
 -    __attribute__ ((__format__ (__printf__, 3, 4)))
 +    __attribute__ ((__format__ (gnu_printf, 3, 4)))
+ #define PRINTF_INDENT_LIKE(FCN) \
+   void FCN (const char *file, unsigned int line, unsigned int indent, \
+ 	    const char *format, ...) \
+-    __attribute__ ((__format__ (__printf__, 4, 5)))
++    __attribute__ ((__format__ (gnu_printf, 4, 5)))
  
  #else /* __GNUC__ < 2 || defined(VMS) */
  
-diff -urN binutils-2.38.orig/gold/configure binutils-2.38/gold/configure
---- binutils-2.38.orig/gold/configure	2022-01-22 13:25:13.000000000 +0100
-+++ binutils-2.38/gold/configure	2022-04-01 16:25:19.092799300 +0200
-@@ -10204,7 +10204,7 @@
+diff --git a/gold/configure b/gold/configure
+index b9f062b68eb..fde982191c5 100755
+--- a/gold/configure
++++ b/gold/configure
+@@ -10204,7 +10204,7 @@ else
  /* end confdefs.h.  */
  
  template<typename T> extern void foo(const char*, ...)
@@ -68,10 +64,11 @@ diff -urN binutils-2.38.orig/gold/configure binutils-2.38/gold/configure
  template<typename T> void foo(const char* format, ...) {}
  void bar() { foo<int>("%s\n", "foo"); }
  
-diff -urN binutils-2.38.orig/gold/configure.ac binutils-2.38/gold/configure.ac
---- binutils-2.38.orig/gold/configure.ac	2022-01-22 13:14:09.000000000 +0100
-+++ binutils-2.38/gold/configure.ac	2022-04-01 16:25:56.733450400 +0200
-@@ -679,7 +679,7 @@
+diff --git a/gold/configure.ac b/gold/configure.ac
+index 1716a779416..cae29866f38 100644
+--- a/gold/configure.ac
++++ b/gold/configure.ac
+@@ -679,7 +679,7 @@ AC_CACHE_CHECK([whether we can use attributes with template functions],
  [gold_cv_template_attribute],
  [AC_COMPILE_IFELSE([AC_LANG_SOURCE([
  template<typename T> extern void foo(const char*, ...)
@@ -80,10 +77,11 @@ diff -urN binutils-2.38.orig/gold/configure.ac binutils-2.38/gold/configure.ac
  template<typename T> void foo(const char* format, ...) {}
  void bar() { foo<int>("%s\n", "foo"); }
  ])], [gold_cv_template_attribute=yes], [gold_cv_template_attribute=no])])
-diff -urN binutils-2.38.orig/include/ansidecl.h binutils-2.38/include/ansidecl.h
---- binutils-2.38.orig/include/ansidecl.h	2022-01-22 13:14:09.000000000 +0100
-+++ binutils-2.38/include/ansidecl.h	2022-04-01 16:26:58.905567000 +0200
-@@ -195,7 +195,7 @@
+diff --git a/include/ansidecl.h b/include/ansidecl.h
+index 0515228f325..7c2b9f18306 100644
+--- a/include/ansidecl.h
++++ b/include/ansidecl.h
+@@ -195,7 +195,7 @@ So instead we use the macro below and test it against specific values.  */
     before GCC 3.3, but as of 3.3 we need to add the `nonnull'
     attribute to retain this behavior.  */
  #ifndef ATTRIBUTE_PRINTF
@@ -92,7 +90,7 @@ diff -urN binutils-2.38.orig/include/ansidecl.h binutils-2.38/include/ansidecl.h
  #define ATTRIBUTE_PRINTF_1 ATTRIBUTE_PRINTF(1, 2)
  #define ATTRIBUTE_PRINTF_2 ATTRIBUTE_PRINTF(2, 3)
  #define ATTRIBUTE_PRINTF_3 ATTRIBUTE_PRINTF(3, 4)
-@@ -223,7 +223,7 @@
+@@ -223,7 +223,7 @@ So instead we use the macro below and test it against specific values.  */
     NULL format specifier was allowed as of gcc 3.3.  */
  #ifndef ATTRIBUTE_NULL_PRINTF
  # if (GCC_VERSION >= 3003)
@@ -101,3 +99,5 @@ diff -urN binutils-2.38.orig/include/ansidecl.h binutils-2.38/include/ansidecl.h
  # else
  #  define ATTRIBUTE_NULL_PRINTF(m, n)
  # endif /* GNUC >= 3.3 */
+-- 
+2.32.0
diff --git a/patches/binutils/3001-try-fix-compare_section-abort.patch b/patches/binutils/3001-try-fix-compare_section-abort.patch
new file mode 100644
index 0000000..c621865
--- /dev/null
+++ b/patches/binutils/3001-try-fix-compare_section-abort.patch
@@ -0,0 +1,13 @@
+diff --git a/ld/ldlang.c b/ld/ldlang.c
+index b66d8c6bc1d..a909c71e771 100644
+--- a/ld/ldlang.c
++++ b/ld/ldlang.c
+@@ -649,7 +649,7 @@ wild_sort (lang_wild_statement_type *wild,
+ 	 looking at the sections for this file.  */
+ 
+       /* Find the correct node to append this section.  */
+-      if (compare_section (sec->spec.sorted, section, (*tree)->section) < 0)
++      if (sec != NULL && sec->spec.sorted != none && sec->spec.sorted != by_none && compare_section (sec->spec.sorted, section, (*tree)->section) < 0)
+ 	tree = &((*tree)->left);
+       else
+ 	tree = &((*tree)->right);
diff --git a/patches/gcc/gcc-13-fix-radix-sort-on-32bit-platforms.patch b/patches/gcc/gcc-13-fix-radix-sort-on-32bit-platforms.patch
new file mode 100644
index 0000000..43648ad
--- /dev/null
+++ b/patches/gcc/gcc-13-fix-radix-sort-on-32bit-platforms.patch
@@ -0,0 +1,55 @@
+From c7c22c10118d9f738ce60c97675def01c5e2d33d Mon Sep 17 00:00:00 2001
+From: Thomas Neumann <tneumann@users.sourceforge.net>
+Date: Wed, 10 May 2023 12:33:49 +0200
+Subject: [PATCH] fix radix sort on 32bit platforms [PR109670]
+
+The radix sort uses two buffers, a1 for input and a2 for output.
+After every digit the role of the two buffers is swapped.
+When terminating the sort early the code made sure the output
+was in a2.  However, when we run out of bits, as can happen on
+32bit platforms, the sorted result was in a1, was we had just
+swapped a1 and a2.
+This patch fixes the problem by unconditionally having a1 as
+output after every loop iteration.
+
+This bug manifested itself only on 32bit platforms and even then
+only in some circumstances, as it needs frames where a swap
+is required due to differences in the top-most byte, which is
+affected by ASLR. The new logic was validated by exhaustive
+search over 32bit input values.
+
+libgcc/ChangeLog:
+        * unwind-dw2-fde.c: Fix radix sort buffer management.
+---
+ libgcc/unwind-dw2-fde.c | 8 +++-----
+ 1 file changed, 3 insertions(+), 5 deletions(-)
+
+diff --git a/libgcc/unwind-dw2-fde.c b/libgcc/unwind-dw2-fde.c
+index 7b74c391ced..31a3834156b 100644
+--- a/libgcc/unwind-dw2-fde.c
++++ b/libgcc/unwind-dw2-fde.c
+@@ -624,8 +624,6 @@ fde_radixsort (struct object *ob, fde_extractor_t fde_extractor,
+       // Stop if we are already sorted.
+       if (!violations)
+ 	{
+-	  // The sorted data is in a1 now.
+-	  a2 = a1;
+ 	  break;
+ 	}
+ 
+@@ -660,9 +658,9 @@ fde_radixsort (struct object *ob, fde_extractor_t fde_extractor,
+ #undef FANOUT
+ #undef FANOUTBITS
+ 
+-  // The data is in a2 now, move in place if needed.
+-  if (a2 != v1->array)
+-    memcpy (v1->array, a2, sizeof (const fde *) * n);
++  // The data is in a1 now, move in place if needed.
++  if (a1 != v1->array)
++    memcpy (v1->array, a1, sizeof (const fde *) * n);
+ }
+ 
+ static inline void
+-- 
+2.39.2
+
diff --git a/patches/gdb/gdb-fix-using-gnu-print.patch b/patches/gdb/gdb-fix-using-gnu-print.patch
index b32bb8d..a7d573d 100644
--- a/patches/gdb/gdb-fix-using-gnu-print.patch
+++ b/patches/gdb/gdb-fix-using-gnu-print.patch
@@ -1,43 +1,15 @@
-From 23c68472557842b9c2706ba25d28711db3241081 Mon Sep 17 00:00:00 2001
+From 9c62d820184b60748d002b4874b87e4b38d6a461 Mon Sep 17 00:00:00 2001
 From: Orgad Shaneh <orgads@gmail.com>
 Date: Thu, 13 Feb 2020 09:25:02 +0200
-Subject: [PATCH] Fix using gnu print
+Subject: [PATCH 2/5] Fix using gnu print
 
 ---
- bfd/bfd-in.h                | 2 +-
- bfd/bfd-in2.h               | 2 +-
- gdb/gdbsupport/format.h     | 6 +++++-
+ gdbsupport/format.h         | 6 +++++-
  gnulib/import/inttypes.in.h | 8 ++++----
- 4 files changed, 11 insertions(+), 7 deletions(-)
+ 2 files changed, 9 insertions(+), 5 deletions(-)
 
-diff --git a/bfd/bfd-in.h b/bfd/bfd-in.h
-index d81cbb791f..6c14fc5da5 100644
---- a/bfd/bfd-in.h
-+++ b/bfd/bfd-in.h
-@@ -158,7 +158,7 @@ typedef BFD_HOST_U_64_BIT symvalue;
- 
- #if BFD_HOST_64BIT_LONG
- #define BFD_VMA_FMT "l"
--#elif defined (__MSVCRT__)
-+#elif defined(__MSVCRT__) && !defined( __USE_MINGW_ANSI_STDIO)
- #define BFD_VMA_FMT "I64"
- #else
- #define BFD_VMA_FMT "ll"
-diff --git a/bfd/bfd-in2.h b/bfd/bfd-in2.h
-index 6f3e41da37..54e9c7a56d 100644
---- a/bfd/bfd-in2.h
-+++ b/bfd/bfd-in2.h
-@@ -165,7 +165,7 @@ typedef BFD_HOST_U_64_BIT symvalue;
- 
- #if BFD_HOST_64BIT_LONG
- #define BFD_VMA_FMT "l"
--#elif defined (__MSVCRT__)
-+#elif defined (__MSVCRT__) && !defined(__USE_MINGW_ANSI_STDIO)
- #define BFD_VMA_FMT "I64"
- #else
- #define BFD_VMA_FMT "ll"
-diff --git a/gdb/gdbsupport/format.h b/gdb/gdbsupport/format.h
-index 80f012a41a..17a5560283 100644
+diff --git a/gdbsupport/format.h b/gdbsupport/format.h
+index 921fca5e04d..75d12ae531a 100644
 --- a/gdbsupport/format.h
 +++ b/gdbsupport/format.h
 @@ -23,7 +23,11 @@
@@ -54,45 +26,44 @@ index 80f012a41a..17a5560283 100644
  #else
  # define USE_PRINTF_I64 0
 diff --git a/gnulib/import/inttypes.in.h b/gnulib/import/inttypes.in.h
-index ed09db6e86..ae06fdedc8 100644
+index e9ee500e3e6..b1f1f7edd00 100644
 --- a/gnulib/import/inttypes.in.h
 +++ b/gnulib/import/inttypes.in.h
-@@ -187,7 +187,7 @@
+@@ -171,7 +171,7 @@
  #ifdef INT64_MAX
  # if (@APPLE_UNIVERSAL_BUILD@ ? defined _LP64 : @INT64_MAX_EQ_LONG_MAX@)
  #  define _PRI64_PREFIX "l"
 -# elif defined _MSC_VER || defined __MINGW32__
 +# elif (defined _MSC_VER || defined __MINGW32__) && !defined(__USE_MINGW_ANSI_STDIO)
  #  define _PRI64_PREFIX "I64"
- # elif @HAVE_LONG_LONG_INT@ && LONG_MAX >> 30 == 1
+ # elif LONG_MAX >> 30 == 1
  #  define _PRI64_PREFIX _LONG_LONG_FORMAT_PREFIX
-@@ -204,7 +204,7 @@
+@@ -186,7 +186,7 @@
  #ifdef UINT64_MAX
  # if (@APPLE_UNIVERSAL_BUILD@ ? defined _LP64 : @UINT64_MAX_EQ_ULONG_MAX@)
  #  define _PRIu64_PREFIX "l"
 -# elif defined _MSC_VER || defined __MINGW32__
 +# elif (defined _MSC_VER || defined __MINGW32__) && !defined(__USE_MINGW_ANSI_STDIO)
  #  define _PRIu64_PREFIX "I64"
- # elif @HAVE_UNSIGNED_LONG_LONG_INT@ && ULONG_MAX >> 31 == 1
+ # elif ULONG_MAX >> 31 == 1
  #  define _PRIu64_PREFIX _LONG_LONG_FORMAT_PREFIX
-@@ -680,7 +680,7 @@
+@@ -583,7 +583,7 @@
  #ifdef INT64_MAX
  # if (@APPLE_UNIVERSAL_BUILD@ ? defined _LP64 : @INT64_MAX_EQ_LONG_MAX@)
  #  define _SCN64_PREFIX "l"
 -# elif defined _MSC_VER || defined __MINGW32__
 +# elif (defined _MSC_VER || defined __MINGW32__) && !defined(__USE_MINGW_ANSI_STDIO)
  #  define _SCN64_PREFIX "I64"
- # elif @HAVE_LONG_LONG_INT@ && LONG_MAX >> 30 == 1
+ # elif LONG_MAX >> 30 == 1
  #  define _SCN64_PREFIX _LONG_LONG_FORMAT_PREFIX
-@@ -697,7 +697,7 @@
+@@ -598,7 +598,7 @@
  #ifdef UINT64_MAX
  # if (@APPLE_UNIVERSAL_BUILD@ ? defined _LP64 : @UINT64_MAX_EQ_ULONG_MAX@)
  #  define _SCNu64_PREFIX "l"
 -# elif defined _MSC_VER || defined __MINGW32__
 +# elif (defined _MSC_VER || defined __MINGW32__) && !defined(__USE_MINGW_ANSI_STDIO)
  #  define _SCNu64_PREFIX "I64"
- # elif @HAVE_UNSIGNED_LONG_LONG_INT@ && ULONG_MAX >> 31 == 1
+ # elif ULONG_MAX >> 31 == 1
  #  define _SCNu64_PREFIX _LONG_LONG_FORMAT_PREFIX
 -- 
-2.25.0.windows.1
-
+2.33.1.windows.1
diff --git a/patches/make/make-4.3_undef-HAVE_STRUCT_DIRENT_D_TYPE.patch b/patches/make/make-4.3_undef-HAVE_STRUCT_DIRENT_D_TYPE.patch
new file mode 100644
index 0000000..8d31d86
--- /dev/null
+++ b/patches/make/make-4.3_undef-HAVE_STRUCT_DIRENT_D_TYPE.patch
@@ -0,0 +1,11 @@
+--- a/src/config.h.W32
++++ b/src/config.h.W32
+@@ -348,7 +348,7 @@
+ /* Define to 1 if `d_type' is a member of `struct dirent'. */
+ /* SV 57152: MinGW64 version of dirent doesn't support d_type. */
+-#ifndef __MINGW64__
++#ifndef __MINGW32__
+ # define HAVE_STRUCT_DIRENT_D_TYPE 1
+ #endif
+ 
+ /* Define to 1 if 'n_un.n_name' is a member of 'struct nlist'. */
diff --git a/patches/make/make-4.4-timestamps.patch b/patches/make/make-4.4-timestamps.patch
new file mode 100644
index 0000000..8558c2d
--- /dev/null
+++ b/patches/make/make-4.4-timestamps.patch
@@ -0,0 +1,37 @@
+From 1f542f915d6a3f8a69a4acae94b01185df7ee2a6 Mon Sep 17 00:00:00 2001
+From: Orgad Shaneh <orgads@gmail.com>
+Date: Wed, 2 Nov 2022 18:23:57 +0200
+Subject: [PATCH] Fix reading file timestamp as 64-bit on MinGW32
+
+Commit 01142a53c9d (Add support for intmax_t) added support for 64-bit
+time_t by defining __MINGW_USE_VC2005_COMPAT. But this only works with
+_stat64 as expected. When stat is used on 32-bit systems, it returns a
+bad timestamp (for example, 72586185920376753).
+
+This triggers the following errors every time make is executed:
+mingw32-make: Warning: File 'Makefile' has modification time 7.3e+16 s in the future
+mingw32-make: warning:  Clock skew detected.  Your build may be incomplete.
+
+and of course, dependencies are completely broken.
+
+Fix by enabling _stat64 also for MinGW.
+---
+ src/remake.c | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+diff --git a/src/remake.c b/src/remake.c
+index 4ce3d2a3..83b0b79d 100644
+--- a/src/remake.c
++++ b/src/remake.c
+@@ -37,7 +37,7 @@ this program.  If not, see <https://www.gnu.org/licenses/>.  */
+ #include <windows.h>
+ #include <io.h>
+ #include <sys/stat.h>
+-#if defined(_MSC_VER) && _MSC_VER > 1200
++#if defined(__MINGW32__) || (defined(_MSC_VER) && _MSC_VER > 1200)
+ /* VC7 or later supprots _stat64 to access 64-bit file size. */
+ #define STAT _stat64
+ #else
+-- 
+2.38.1.windows.1.1.gfa087c7d8f
+
diff --git a/patches/make/make-getopt.patch b/patches/make/make-getopt.patch
index ad01dae..b81a8fd 100644
--- a/patches/make/make-getopt.patch
+++ b/patches/make/make-getopt.patch
@@ -11,8 +11,8 @@ Index: getopt.c
 RCS file: /sources/make/make/getopt.c,v
 retrieving revision 1.22
 diff -u -p -r1.22 getopt.c
---- make-3.82.orig/getopt.c	25 Oct 2009 18:56:45 -0000	1.22
-+++ make-3.82/getopt.c	5 Jul 2010 20:05:22 -0000
+--- make-3.82.orig/src/getopt.c	25 Oct 2009 18:56:45 -0000	1.22
++++ make-3.82/src/getopt.c	5 Jul 2010 20:05:22 -0000
 @@ -436,6 +436,9 @@ _getopt_initialize (int argc, char *cons
      }
    else
diff --git a/patches/make/make-linebuf-mingw.patch b/patches/make/make-linebuf-mingw.patch
index ce93fa0..cbce4ed 100644
--- a/patches/make/make-linebuf-mingw.patch
+++ b/patches/make/make-linebuf-mingw.patch
@@ -1,5 +1,5 @@
---- make.orig/main.c
-+++ make/main.c
+--- make.orig/src/main.c
++++ make/src/main.c
 @@ -971,8 +971,11 @@
  
  #endif
diff --git a/patches/ncurses/ncurses-6.3-cflags-private.patch b/patches/ncurses/ncurses-6.3-cflags-private.patch
new file mode 100644
index 0000000..84c0379
--- /dev/null
+++ b/patches/ncurses/ncurses-6.3-cflags-private.patch
@@ -0,0 +1,10 @@
+--- ncurses-6.3/misc/gen-pkgconfig.in.orig	2022-04-29 20:19:42.668758200 +0200
++++ ncurses-6.3/misc/gen-pkgconfig.in	2022-04-29 20:27:10.636256800 +0200
+@@ -238,6 +238,7 @@
+ Libs: $lib_flags $LIBS
+ Libs.private: @LIBS@ $main_libs
+ Cflags: $CFLAGS
++Cflags.private: -DNCURSES_STATIC
+ EOF
+ 
+ done
diff --git a/patches/ncurses/ncurses-6.3-pkgconfig.patch b/patches/ncurses/ncurses-6.3-pkgconfig.patch
new file mode 100644
index 0000000..e3b5d46
--- /dev/null
+++ b/patches/ncurses/ncurses-6.3-pkgconfig.patch
@@ -0,0 +1,24 @@
+diff -ruN a/misc/gen-pkgconfig.in b/misc/gen-pkgconfig.in
+--- a/misc/gen-pkgconfig.in	2021-08-07 23:36:33.000000000 +0200
++++ b/misc/gen-pkgconfig.in	2021-11-03 11:12:51.127160950 +0100
+@@ -83,7 +83,7 @@
+ fi
+ 
+ lib_flags=
+-for opt in -L$libdir @EXTRA_PKG_LDFLAGS@ @LIBS@
++for opt in -L$libdir @LIBS@
+ do
+ 	case $opt in
+ 	-l*) # LIBS is handled specially below
+diff -ruN a/misc/ncurses-config.in b/misc/ncurses-config.in
+--- a/misc/ncurses-config.in	2021-08-07 23:36:14.000000000 +0200
++++ b/misc/ncurses-config.in	2021-11-03 11:26:12.393533954 +0100
+@@ -101,7 +101,7 @@
+ # There is no portable way to find the list of standard library directories.
+ # Require a POSIX shell anyway, to keep this simple.
+ lib_flags=
+-for opt in -L$libdir @EXTRA_PKG_LDFLAGS@ $LIBS
++for opt in -L$libdir $LIBS
+ do
+ 	case $opt in
+ 	-specs*) # ignore linker specs-files which were used to build library
diff --git a/patches/openssl/openssl-3.0.8-relocation.patch b/patches/openssl/openssl-3.0.8-relocation.patch
new file mode 100644
index 0000000..68b276c
--- /dev/null
+++ b/patches/openssl/openssl-3.0.8-relocation.patch
@@ -0,0 +1,658 @@
+--- crypto/build.info.orig
++++ crypto/build.info
+@@ -105,7 +105,7 @@
+         mem.c mem_sec.c \
+         cversion.c info.c cpt_err.c ebcdic.c uid.c o_time.c o_dir.c \
+         o_fopen.c getenv.c o_init.c init.c trace.c provider.c provider_child.c \
+-        punycode.c passphrase.c
++        punycode.c passphrase.c pathtools.c
+ SOURCE[../providers/libfips.a]=$UTIL_COMMON
+ 
+ SOURCE[../libcrypto]=$UPLINKSRC
+--- crypto/engine/eng_list.c.orig
++++ crypto/engine/eng_list.c
+@@ -12,6 +12,7 @@
+ #define OPENSSL_SUPPRESS_DEPRECATED
+ 
+ #include "eng_local.h"
++#include "pathtools.h"
+ 
+ /*
+  * The linked-list of pointers to engine types. engine_list_head incorporates
+@@ -39,6 +40,20 @@
+  * cleanup.
+  */
+ 
++char * enginedir_relocation(const char *path)
++{
++  char exe_path[PATH_MAX];
++  get_executable_path (NULL, &exe_path[0], sizeof(exe_path)/sizeof(exe_path[0]));
++  if (strrchr (exe_path, '/') != NULL)
++  {
++     strrchr (exe_path, '/')[1] = '\0';
++  }
++  char * rel_to_datadir = get_relative_path (OPENSSLBIN, path);
++  strcat (exe_path, rel_to_datadir);
++  simplify_path (&exe_path[0]);
++  return malloc_copy_string(exe_path);
++}
++
+ static void engine_list_cleanup(void)
+ {
+     ENGINE *iterator = engine_list_head;
+@@ -413,8 +428,10 @@
+      * Prevent infinite recursion if we're looking for the dynamic engine.
+      */
+     if (strcmp(id, "dynamic")) {
+-        if ((load_dir = ossl_safe_getenv("OPENSSL_ENGINES")) == NULL)
+-            load_dir = ENGINESDIR;
++        if ((load_dir = ossl_safe_getenv("OPENSSL_ENGINES")) == NULL) {
++            const char * reloc_engines = enginedir_relocation(ENGINESDIR);
++            load_dir = reloc_engines;
++        }
+         iterator = ENGINE_by_id("dynamic");
+         if (!iterator || !ENGINE_ctrl_cmd_string(iterator, "ID", id, 0) ||
+             !ENGINE_ctrl_cmd_string(iterator, "DIR_LOAD", "2", 0) ||
+--- /dev/null
++++ crypto/pathtools.c
+@@ -0,0 +1,499 @@
++/*
++      .Some useful path tools.
++        .ASCII only for now.
++   .Written by Ray Donnelly in 2014.
++   .Licensed under CC0 (and anything.
++  .else you need to license it under).
++      .No warranties whatsoever.
++  .email: <mingw.android@gmail.com>.
++ */
++
++#if defined(__APPLE__)
++#include <stdlib.h>
++#else
++#include <malloc.h>
++#endif
++#include <limits.h>
++#include <stdio.h>
++#include <string.h>
++#if defined(__linux__) || defined(__CYGWIN__) || defined(__MSYS__)
++#include <alloca.h>
++#endif
++#include <unistd.h>
++
++/* If you don't define this, then get_executable_path()
++   can only use argv[0] which will often not work well */
++#define IMPLEMENT_SYS_GET_EXECUTABLE_PATH
++
++#if defined(IMPLEMENT_SYS_GET_EXECUTABLE_PATH)
++#if defined(__linux__) || defined(__CYGWIN__) || defined(__MSYS__)
++/* Nothing needed, unistd.h is enough. */
++#elif defined(__APPLE__)
++#include <mach-o/dyld.h>
++#elif defined(_WIN32)
++#define WIN32_MEAN_AND_LEAN
++#include <windows.h>
++#include <psapi.h>
++#endif
++#endif /* defined(IMPLEMENT_SYS_GET_EXECUTABLE_PATH) */
++
++#include "pathtools.h"
++
++char *
++malloc_copy_string(char const * original)
++{
++  char * result = (char *) malloc (sizeof (char*) * strlen (original)+1);
++  if (result != NULL)
++  {
++    strcpy (result, original);
++  }
++  return result;
++}
++
++void
++sanitise_path(char * path)
++{
++  size_t path_size = strlen (path);
++
++  /* Replace any '\' with '/' */
++  char * path_p = path;
++  while ((path_p = strchr (path_p, '\\')) != NULL)
++  {
++    *path_p = '/';
++  }
++  /* Replace any '//' with '/' */
++  path_p = path;
++  while ((path_p = strstr (path_p, "//")) != NULL)
++  {
++    memmove (path_p, path_p + 1, path_size--);
++  }
++  return;
++}
++
++char *
++get_relative_path(char const * from_in, char const * to_in)
++{
++  size_t from_size = (from_in == NULL) ? 0 : strlen (from_in);
++  size_t to_size = (to_in == NULL) ? 0 : strlen (to_in);
++  size_t max_size = (from_size + to_size) * 2 + 4;
++  char * scratch_space = (char *) alloca (from_size + 1 + to_size + 1 + max_size + max_size);
++  char * from;
++  char * to;
++  char * common_part;
++  char * result;
++  size_t count;
++
++  /* No to, return "./" */
++  if (to_in == NULL)
++  {
++    return malloc_copy_string ("./");
++  }
++
++  /* If alloca failed or no from was given return a copy of to */
++  if (   from_in == NULL
++      || scratch_space == NULL )
++  {
++    return malloc_copy_string (to_in);
++  }
++
++  from = scratch_space;
++  strcpy (from, from_in);
++  to = from + from_size + 1;
++  strcpy (to, to_in);
++  common_part = to + to_size + 1;
++  result = common_part + max_size;
++  simplify_path (from);
++  simplify_path (to);
++
++  result[0] = '\0';
++
++  size_t match_size_dirsep = 0;  /* The match size up to the last /. Always wind back to this - 1 */
++  size_t match_size = 0;         /* The running (and final) match size. */
++  size_t largest_size = (from_size > to_size) ? from_size : to_size;
++  int to_final_is_slash = (to[to_size-1] == '/') ? 1 : 0;
++  char from_c;
++  char to_c;
++  for (match_size = 0; match_size < largest_size; ++match_size)
++  {
++    /* To simplify the logic, always pretend the strings end with '/' */
++    from_c = (match_size < from_size) ? from[match_size] : '/';
++    to_c =   (match_size <   to_size) ?   to[match_size] : '/';
++
++    if (from_c != to_c)
++    {
++      if (from_c != '\0' || to_c != '\0')
++      {
++        match_size = match_size_dirsep;
++      }
++      break;
++    }
++    else if (from_c == '/')
++    {
++      match_size_dirsep = match_size;
++    }
++  }
++  strncpy (common_part, from, match_size);
++  common_part[match_size] = '\0';
++  from += match_size;
++  to += match_size;
++  size_t ndotdots = 0;
++  char const* from_last = from + strlen(from) - 1;
++  while ((from = strchr (from, '/')) && from != from_last)
++  {
++    ++ndotdots;
++    ++from;
++  }
++  for (count = 0; count < ndotdots; ++count)
++  {
++    strcat(result, "../");
++  }
++  if (strlen(to) > 0)
++  {
++    strcat(result, to+1);
++  }
++  /* Make sure that if to ends with '/' result does the same, and
++     vice-versa. */
++  size_t size_result = strlen(result);
++  if ((to_final_is_slash == 1)
++      && (!size_result || result[size_result-1] != '/'))
++  {
++    strcat (result, "/");
++  }
++  else if (!to_final_is_slash
++           && size_result && result[size_result-1] == '/')
++  {
++    result[size_result-1] = '\0';
++  }
++
++  return malloc_copy_string (result);
++}
++
++void
++simplify_path(char * path)
++{
++  ssize_t n_toks = 1; /* in-case we need an empty initial token. */
++  ssize_t i, j;
++  size_t tok_size;
++  size_t in_size = strlen (path);
++  int it_ended_with_a_slash = (path[in_size - 1] == '/') ? 1 : 0;
++  char * result = path;
++  sanitise_path(result);
++  char * result_p = result;
++
++  do
++  {
++    ++n_toks;
++    ++result_p;
++  } while ((result_p = strchr (result_p, '/')) != NULL);
++
++  result_p = result;
++  char const ** toks = (char const **) alloca (sizeof (char const*) * n_toks);
++  n_toks = 0;
++  do
++  {
++    if (result_p > result)
++    {
++      *result_p++ = '\0';
++    }
++    else if (*result_p == '/')
++    {
++      /* A leading / creates an empty initial token. */
++      toks[n_toks++] = result_p;
++      *result_p++ = '\0';
++    }
++    toks[n_toks++] = result_p;
++  } while ((result_p = strchr (result_p, '/')) != NULL);
++
++  /* Remove all non-leading '.' and any '..' we can match
++     with an earlier forward path (i.e. neither '.' nor '..') */
++  for (i = 1; i < n_toks; ++i)
++  {
++    int removals[2] = { -1, -1 };
++    if ( strcmp (toks[i], "." ) == 0)
++    {
++      removals[0] = i;
++    }
++    else if ( strcmp (toks[i], ".." ) == 0)
++    {
++      /* Search backwards for a forward path to collapse.
++         If none are found then the .. also stays. */
++      for (j = i - 1; j > -1; --j)
++      {
++        if ( strcmp (toks[j], "." )
++          && strcmp (toks[j], ".." ) )
++        {
++          removals[0] = j;
++          removals[1] = i;
++          break;
++        }
++      }
++    }
++    for (j = 0; j < 2; ++j)
++    {
++      if (removals[j] >= 0) /* Can become -2 */
++      {
++        --n_toks;
++        memmove (&toks[removals[j]], &toks[removals[j]+1], (n_toks - removals[j])*sizeof (char*));
++        --i;
++        if (!j)
++        {
++          --removals[1];
++        }
++      }
++    }
++  }
++  result_p = result;
++  for (i = 0; i < n_toks; ++i)
++  {
++    tok_size = strlen(toks[i]);
++    memmove (result_p, toks[i], tok_size);
++    result_p += tok_size;
++    if ((!i || tok_size) && ((i < n_toks - 1) || it_ended_with_a_slash == 1))
++    {
++      *result_p = '/';
++      ++result_p;
++    }
++  }
++  *result_p = '\0';
++}
++
++/* Returns actual_to by calculating the relative path from -> to and
++   applying that to actual_from. An assumption that actual_from is a
++   dir is made, and it may or may not end with a '/' */
++char const *
++get_relocated_path (char const * from, char const * to, char const * actual_from)
++{
++  char const * relative_from_to = get_relative_path (from, to);
++  char * actual_to = (char *) malloc (strlen(actual_from) + 2 + strlen(relative_from_to));
++  return actual_to;
++}
++
++int
++get_executable_path(char const * argv0, char * result, ssize_t max_size)
++{
++  char * system_result = (char *) alloca (max_size);
++  ssize_t system_result_size = -1;
++  ssize_t result_size = -1;
++
++  if (system_result != NULL)
++  {
++#if defined(IMPLEMENT_SYS_GET_EXECUTABLE_PATH)
++#if defined(__linux__) || defined(__CYGWIN__) || defined(__MSYS__)
++    system_result_size = readlink("/proc/self/exe", system_result, max_size);
++#elif defined(__APPLE__)
++    uint32_t bufsize = (uint32_t)max_size;
++    if (_NSGetExecutablePath(system_result, &bufsize) == 0)
++    {
++      system_result_size = (ssize_t)bufsize;
++    }
++#elif defined(_WIN32)
++    unsigned long bufsize = (unsigned long)max_size;
++    system_result_size = GetModuleFileNameA(NULL, system_result, bufsize);
++    if (system_result_size == 0 || system_result_size == (ssize_t)bufsize)
++    {
++      /* Error, possibly not enough space. */
++      system_result_size = -1;
++    }
++    else
++    {
++      /* Early conversion to unix slashes instead of more changes
++         everywhere else .. */
++      char * winslash;
++      system_result[system_result_size] = '\0';
++      while ((winslash = strchr (system_result, '\\')) != NULL)
++      {
++        *winslash = '/';
++      }
++    }
++#else
++#warning "Don't know how to get executable path on this system"
++#endif
++#endif /* defined(IMPLEMENT_SYS_GET_EXECUTABLE_PATH) */
++  }
++  /* Use argv0 as a default in-case of failure */
++  if (system_result_size != -1)
++  {
++    strncpy (result, system_result, system_result_size);
++    result[system_result_size] = '\0';
++  }
++  else
++  {
++    if (argv0 != NULL)
++    {
++      strncpy (result, argv0, max_size);
++      result[max_size-1] = '\0';
++    }
++    else
++    {
++      result[0] = '\0';
++    }
++  }
++  result_size = strlen (result);
++  return result_size;
++}
++
++char const *
++strip_n_prefix_folders(char const * path, size_t n)
++{
++  if (path == NULL)
++  {
++    return NULL;
++  }
++
++  if (path[0] != '/')
++  {
++    return path;
++  }
++
++  char const * last = path;
++  while (n-- && path != NULL)
++  {
++    last = path;
++    path = strchr (path + 1, '/');
++  }
++  return (path == NULL) ? last : path;
++}
++
++void
++strip_n_suffix_folders(char * path, size_t n)
++{
++  if (path == NULL)
++  {
++    return;
++  }
++  while (n--)
++  {
++    if (strrchr (path + 1, '/'))
++    {
++      *strrchr (path + 1, '/') = '\0';
++    }
++    else
++    {
++      return;
++    }
++  }
++  return;
++}
++
++size_t
++split_path_list(char const * path_list, char split_char, char *** arr)
++{
++  size_t path_count;
++  size_t path_list_size;
++  char const * path_list_p;
++
++  path_list_p = path_list;
++  if (path_list == NULL || path_list[0] == '\0')
++  {
++    return 0;
++  }
++  path_list_size = strlen (path_list);
++
++  path_count = 0;
++  do
++  {
++    ++path_count;
++    ++path_list_p;
++  }
++  while ((path_list_p = strchr (path_list_p, split_char)) != NULL);
++
++  /* allocate everything in one go. */
++  char * all_memory = (char *) malloc (sizeof (char *) * path_count + strlen(path_list) + 1);
++  if (all_memory == NULL)
++    return 0;
++  *arr = (char **)all_memory;
++  all_memory += sizeof (char *) * path_count;
++
++  path_count = 0;
++  path_list_p = path_list;
++  char const * next_path_list_p = 0;
++  do
++  {
++    next_path_list_p = strchr (path_list_p, split_char);
++    if (next_path_list_p != NULL)
++    {
++      ++next_path_list_p;
++    }
++    size_t this_size = (next_path_list_p != NULL)
++                       ? next_path_list_p - path_list_p - 1
++                       : &path_list[path_list_size] - path_list_p;
++    memcpy (all_memory, path_list_p, this_size);
++    all_memory[this_size] = '\0';
++    (*arr)[path_count++] = all_memory;
++    all_memory += this_size + 1;
++  } while ((path_list_p = next_path_list_p) != NULL);
++
++  return path_count;
++}
++
++char *
++get_relocated_path_list(char const * from, char const * to_path_list)
++{
++  char exe_path[MAX_PATH];
++  char * temp;
++  get_executable_path (NULL, &exe_path[0], sizeof (exe_path) / sizeof (exe_path[0]));
++  if ((temp = strrchr (exe_path, '/')) != NULL)
++  {
++    temp[1] = '\0';
++  }
++
++  char **arr = NULL;
++  /* Ask Alexey why he added this. Are we not 100% sure
++     that we're dealing with unix paths here? */
++  char split_char = ':';
++  if (strchr (to_path_list, ';'))
++  {
++    split_char = ';';
++  }
++  size_t count = split_path_list (to_path_list, split_char, &arr);
++  int result_size = 1 + (count - 1); /* count - 1 is for ; delim. */
++  size_t exe_path_size = strlen (exe_path);
++  size_t i;
++  /* Space required is:
++     count * (exe_path_size + strlen (rel_to_datadir))
++     rel_to_datadir upper bound is:
++     (count * strlen (from)) + (3 * num_slashes (from))
++     + strlen(arr[i]) + 1.
++     .. pathalogically num_slashes (from) is strlen (from)
++     (from = ////////) */
++  size_t space_required = (count * (exe_path_size + 4 * strlen (from))) + count - 1;
++  for (i = 0; i < count; ++i)
++  {
++    space_required += strlen (arr[i]);
++  }
++  char * scratch = (char *) alloca (space_required);
++  if (scratch == NULL)
++    return NULL;
++  for (i = 0; i < count; ++i)
++  {
++    char * rel_to_datadir = get_relative_path (from, arr[i]);
++    scratch[0] = '\0';
++    arr[i] = scratch;
++    strcat (scratch, exe_path);
++    strcat (scratch, rel_to_datadir);
++    simplify_path (arr[i]);
++    size_t arr_i_size = strlen (arr[i]);
++    result_size += arr_i_size;
++    scratch = arr[i] + arr_i_size + 1;
++  }
++  char * result = (char *) malloc (result_size);
++  if (result == NULL)
++  {
++    return NULL;
++  }
++  result[0] = '\0';
++  for (i = 0; i < count; ++i)
++  {
++    strcat (result, arr[i]);
++    if (i != count-1)
++    {
++#if defined(_WIN32)
++      strcat (result, ";");
++#else
++      strcat (result, ":");
++#endif
++    }
++  }
++  free ((void*)arr);
++  return result;
++}
+--- crypto/x509/x509_def.c.orig
++++ crypto/x509/x509_def.c
+@@ -9,27 +9,42 @@
+ 
+ #include <stdio.h>
+ #include "internal/cryptlib.h"
++#include "pathtools.h"
+ #include <openssl/crypto.h>
+ #include <openssl/x509.h>
+ 
++char * openssl_relocation(const char *path)
++{
++  char exe_path[PATH_MAX];
++  get_executable_path (NULL, &exe_path[0], sizeof(exe_path)/sizeof(exe_path[0]));
++  if (strrchr (exe_path, '/') != NULL)
++  {
++     strrchr (exe_path, '/')[1] = '\0';
++  }
++  char * rel_to_datadir = get_relative_path (OPENSSLBIN, path);
++  strcat (exe_path, rel_to_datadir);
++  simplify_path (&exe_path[0]);
++  return malloc_copy_string(exe_path);
++}
++
+ const char *X509_get_default_private_dir(void)
+ {
+-    return X509_PRIVATE_DIR;
++    return openssl_relocation(X509_PRIVATE_DIR);
+ }
+ 
+ const char *X509_get_default_cert_area(void)
+ {
+-    return X509_CERT_AREA;
++    return openssl_relocation(X509_CERT_AREA);
+ }
+ 
+ const char *X509_get_default_cert_dir(void)
+ {
+-    return X509_CERT_DIR;
++    return openssl_relocation(X509_CERT_DIR);
+ }
+ 
+ const char *X509_get_default_cert_file(void)
+ {
+-    return X509_CERT_FILE;
++    return openssl_relocation(X509_CERT_FILE);
+ }
+ 
+ const char *X509_get_default_cert_dir_env(void)
+--- /dev/null
++++ pathtools.h
+@@ -0,0 +1,49 @@
++/*
++      .Some useful path tools.
++        .ASCII only for now.
++   .Written by Ray Donnelly in 2014.
++   .Licensed under CC0 (and anything.
++  .else you need to license it under).
++      .No warranties whatsoever.
++  .email: <mingw.android@gmail.com>.
++ */
++
++#ifndef PATHTOOLS_H
++#define PATHTOOLS_H
++
++#include <unistd.h>
++#if defined(__APPLE__)
++#include <stdlib.h>
++#else
++#include <malloc.h>
++#endif
++#include <stdio.h>
++
++char * malloc_copy_string(char const * original);
++
++/* In-place replaces any '\' with '/' and any '//' with '/' */
++void sanitise_path(char * path);
++
++/* Uses a host OS specific function to determine the path of the executable,
++   if IMPLEMENT_SYS_GET_EXECUTABLE_PATH is defined, otherwise uses argv0. */
++int get_executable_path(char const * argv0, char * result, ssize_t max_size);
++
++/* Where possible, in-place removes occourances of '.' and 'path/..' */
++void simplify_path(char * path);
++
++/* Allocates (via malloc) and returns the path to get from from to to. */
++char * get_relative_path(char const * from, char const * to);
++
++size_t split_path_list(char const * path_list, char split_char, char *** arr);
++
++/* Advances path along by the amount that removes n prefix folders. */
++char const *
++strip_n_prefix_folders(char const * path, size_t n);
++
++/* NULL terminates path to remove n suffix folders. */
++void
++strip_n_suffix_folders(char * path, size_t n);
++
++char * get_relocated_path_list(char const * from, char const * to_path_list);
++
++#endif /* PATHTOOLS_H */
diff --git a/scripts/3rdparty-post.sh b/scripts/3rdparty-post.sh
index 7d50443..1716fe1 100644
--- a/scripts/3rdparty-post.sh
+++ b/scripts/3rdparty-post.sh
@@ -63,10 +63,10 @@ function python_deps_post {
 	}
 
 	rm -f $LIBS_DIR/bin/{bz*,bunzip2}
-	rm -f $LIBS_DIR/bin/{tclsh.exe,tclsh86.exe,openssl.exe,capinfo.exe,captoinfo.exe,clear.exe,idle,infocmp.exe}
-	rm -f $LIBS_DIR/bin/{infotocap.exe,c_rehash,ncursesw5-config,reset.exe,sqlite3.exe,tabs.exe}
-	rm -f $LIBS_DIR/bin/{tic.exe,toe.exe,tput.exe,tset.exe,wish.exe,wish86.exe,xmlwf,testgdbm.exe}
+	rm -f $LIBS_DIR/bin/{tclsh.exe,tclsh86.exe,openssl.exe,capinfo.exe,idle,c_rehash,ncursesw5-config,sqlite3.exe}
+	rm -f $LIBS_DIR/bin/{wish.exe,wish86.exe,xmlwf,testgdbm.exe}
 	rm -f $LIBS_DIR/bin/{lzmadec.exe,lzmainfo.exe,unxz.exe,xz*}
+	rm -f $LIBS_DIR/bin/*-w64-mingw32-{captoinfo.exe,clear.exe,infocmp.exe,infotocap.exe,reset.exe,tabs.exe,tic.exe,toe.exe,tput.exe,tset.exe}
 
 	#rm -rf $LIBS_DIR/include
 	rm -rf $LIBS_DIR/lib/pkgconfig
diff --git a/scripts/binutils.sh b/scripts/binutils.sh
index 6c9ad44..ad89f76 100644
--- a/scripts/binutils.sh
+++ b/scripts/binutils.sh
@@ -35,7 +35,7 @@
 
 # **************************************************************************
 
-PKG_VERSION=2.39
+PKG_VERSION=2.40
 PKG_NAME=binutils-${PKG_VERSION}
 [[ $USE_MULTILIB == yes ]] && {
 	PKG_NAME=$BUILD_ARCHITECTURE-$PKG_NAME-multi
@@ -59,6 +59,7 @@ PKG_PATCHES=(
 	binutils/0009-fix-libiberty-configure.mingw.patch
 	binutils/0022-libiberty-missing-typedef.patch
 	binutils/0110-binutils-mingw-gnu-print.patch
+	binutils/3001-try-fix-compare_section-abort.patch
 )
 
 #
diff --git a/scripts/bzip2.sh b/scripts/bzip2.sh
index e403301..4be5e54 100644
--- a/scripts/bzip2.sh
+++ b/scripts/bzip2.sh
@@ -35,7 +35,7 @@
 
 # **************************************************************************
 
-PKG_VERSION=1.0.6
+PKG_VERSION=1.0.8
 PKG_NAME=bzip2-${PKG_VERSION}
 PKG_DIR_NAME=bzip2-${PKG_VERSION}
 PKG_TYPE=.tar.gz
@@ -50,10 +50,8 @@ PKG_PRIORITY=extra
 #
 
 PKG_PATCHES=(
-	bzip2/bzip2-1.0.4-bzip2recover.patch
 	bzip2/bzip2-1.0.6-autoconfiscated.patch
 	bzip2/bzip2-use-cdecl-calling-convention.patch
-	bzip2/bzip2-1.0.5-slash.patch
 )
 
 #
diff --git a/scripts/gcc-12-branch.sh b/scripts/gcc-12-branch.sh
index d6832e1..abacaa9 100644
--- a/scripts/gcc-12-branch.sh
+++ b/scripts/gcc-12-branch.sh
@@ -109,6 +109,9 @@ PKG_CONFIGURE_FLAGS=(
 		&& echo "--enable-sjlj-exceptions" \
 	)
 	#
+	$( [[ $RUNTIME_MAJOR_VERSION -ge 11 ]] \
+		&& echo "--disable-libssp" \
+	)
 	--disable-libstdcxx-pch
 	--disable-libstdcxx-debug
 	$( [[ $BOOTSTRAPING == yes ]] \
diff --git a/scripts/gcc-12.2.0.sh b/scripts/gcc-12.2.0.sh
index beea1f4..e4391f3 100644
--- a/scripts/gcc-12.2.0.sh
+++ b/scripts/gcc-12.2.0.sh
@@ -62,6 +62,7 @@ PKG_PATCHES=(
 	gcc/gcc-libgomp-ftime64.patch
 	gcc/0020-libgomp-Don-t-hard-code-MS-printf-attributes.patch
 	gcc/gcc-10-libgcc-ldflags.patch
+    gcc/gcc-12-replace-abort-with-fancy_abort.patch
 )
 
 #
@@ -108,6 +109,9 @@ PKG_CONFIGURE_FLAGS=(
 		&& echo "--enable-sjlj-exceptions" \
 	)
 	#
+	$( [[ $RUNTIME_MAJOR_VERSION -ge 11 ]] \
+		&& echo "--disable-libssp" \
+	)
 	--disable-libstdcxx-pch
 	--disable-libstdcxx-debug
 	$( [[ $BOOTSTRAPING == yes ]] \
diff --git a/scripts/gcc-12.3.0.sh b/scripts/gcc-12.3.0.sh
index e1c5beb..2909603 100644
--- a/scripts/gcc-12.3.0.sh
+++ b/scripts/gcc-12.3.0.sh
@@ -109,6 +109,9 @@ PKG_CONFIGURE_FLAGS=(
 		&& echo "--enable-sjlj-exceptions" \
 	)
 	#
+	$( [[ $RUNTIME_MAJOR_VERSION -ge 11 ]] \
+		&& echo "--disable-libssp" \
+	)
 	--disable-libstdcxx-pch
 	--disable-libstdcxx-debug
 	$( [[ $BOOTSTRAPING == yes ]] \
diff --git a/scripts/gcc-13-branch.sh b/scripts/gcc-13-branch.sh
index a77ce7a..12ebb72 100644
--- a/scripts/gcc-13-branch.sh
+++ b/scripts/gcc-13-branch.sh
@@ -107,6 +107,9 @@ PKG_CONFIGURE_FLAGS=(
 		&& echo "--enable-sjlj-exceptions" \
 	)
 	#
+	$( [[ $RUNTIME_MAJOR_VERSION -ge 11 ]] \
+		&& echo "--disable-libssp" \
+	)
 	--disable-libstdcxx-pch
 	--disable-libstdcxx-debug
 	$( [[ $BOOTSTRAPING == yes ]] \
diff --git a/scripts/gcc-13.1.0.sh b/scripts/gcc-13.1.0.sh
index 4488b84..e25c5ae 100644
--- a/scripts/gcc-13.1.0.sh
+++ b/scripts/gcc-13.1.0.sh
@@ -58,6 +58,7 @@ PKG_PATCHES=(
 	gcc/0020-libgomp-Don-t-hard-code-MS-printf-attributes.patch
 	gcc/gcc-10-libgcc-ldflags.patch
     gcc/gcc-12-replace-abort-with-fancy_abort.patch
+    gcc/gcc-13-fix-radix-sort-on-32bit-platforms.patch
 )
 
 #
@@ -107,6 +108,9 @@ PKG_CONFIGURE_FLAGS=(
 		&& echo "--enable-sjlj-exceptions" \
 	)
 	#
+	$( [[ $RUNTIME_MAJOR_VERSION -ge 11 ]] \
+		&& echo "--disable-libssp" \
+	)
 	--disable-libstdcxx-pch
 	--disable-libstdcxx-debug
 	$( [[ $BOOTSTRAPING == yes ]] \
diff --git a/scripts/gcc-trunk.sh b/scripts/gcc-trunk.sh
index f583d0e..c25834d 100644
--- a/scripts/gcc-trunk.sh
+++ b/scripts/gcc-trunk.sh
@@ -107,6 +107,9 @@ PKG_CONFIGURE_FLAGS=(
 		&& echo "--enable-sjlj-exceptions" \
 	)
 	#
+	$( [[ $RUNTIME_MAJOR_VERSION -ge 11 ]] \
+		&& echo "--disable-libssp" \
+	)
 	--disable-libstdcxx-pch
 	--disable-libstdcxx-debug
 	$( [[ $BOOTSTRAPING == yes ]] \
diff --git a/scripts/gdb.sh b/scripts/gdb.sh
index fb79b96..790cc47 100644
--- a/scripts/gdb.sh
+++ b/scripts/gdb.sh
@@ -35,7 +35,7 @@
 
 # **************************************************************************
 
-PKG_VERSION=$( [[ `echo $BUILD_VERSION | cut -d. -f1` == 4 || `echo $BUILD_VERSION | cut -d. -f1` == 5 ]] && { echo 7.12; } || { echo 11.2; } )
+PKG_VERSION=$( [[ `echo $BUILD_VERSION | cut -d. -f1` == 4 || `echo $BUILD_VERSION | cut -d. -f1` == 5 ]] && { echo 7.12; } || { echo 13.1; } )
 PKG_NAME=gdb-${PKG_VERSION}
 PKG_DIR_NAME=gdb-${PKG_VERSION}
 PKG_TYPE=.tar.xz
@@ -81,8 +81,8 @@ PKG_CONFIGURE_FLAGS=(
 	--disable-gdbtk
 	#
 	# the _WIN32_WINNT hack here because of: https://sourceware.org/pipermail/gdb/2022-November/050432.html
-	CFLAGS="\"$COMMON_CFLAGS -D__USE_MINGW_ANSI_STDIO=1 -fcommon -D_WIN32_WINNT=0x0601\""
-	CXXFLAGS="\"$COMMON_CXXFLAGS -D__USE_MINGW_ANSI_STDIO=1 -D_WIN32_WINNT=0x0601\""
+	CFLAGS="\"$COMMON_CFLAGS -I$LIBS_DIR/include/ncursesw -D__USE_MINGW_ANSI_STDIO=1 -fcommon -DNCURSES_STATIC -D_WIN32_WINNT=0x0601\""
+	CXXFLAGS="\"$COMMON_CXXFLAGS -I$LIBS_DIR/include/ncursesw -D__USE_MINGW_ANSI_STDIO=1 -DNCURSES_STATIC -D_WIN32_WINNT=0x0601\""
 	CPPFLAGS="\"$COMMON_CPPFLAGS\""
 	LDFLAGS="\"$COMMON_LDFLAGS $( [[ $BUILD_ARCHITECTURE == i686 ]] && echo -Wl,--large-address-aware )\""
 )
diff --git a/scripts/libffi.sh b/scripts/libffi.sh
index 8d4445a..bc57b83 100644
--- a/scripts/libffi.sh
+++ b/scripts/libffi.sh
@@ -35,21 +35,19 @@
 
 # **************************************************************************
 
-PKG_VERSION=3.2.1
+PKG_VERSION=3.4.4
 PKG_NAME=libffi-${PKG_VERSION}
 PKG_DIR_NAME=libffi-${PKG_VERSION}
 PKG_TYPE=.tar.gz
 PKG_URLS=(
-	"https://sourceware.org/pub/libffi/libffi-${PKG_VERSION}${PKG_TYPE}"
+	"https://github.com/libffi/libffi/releases/download/v${PKG_VERSION}/libffi-${PKG_VERSION}${PKG_TYPE}"
 )
 
 PKG_PRIORITY=extra
 
 #
 
-PKG_PATCHES=(
-	libffi/fix_return_size.patch
-)
+PKG_PATCHES=()
 
 #
 
diff --git a/scripts/make.sh b/scripts/make.sh
index 90a22f8..259b73e 100644
--- a/scripts/make.sh
+++ b/scripts/make.sh
@@ -35,10 +35,10 @@
 
 # **************************************************************************
 
-PKG_VERSION=4.2.1
+PKG_VERSION=4.4
 PKG_NAME=make-${PKG_VERSION}
 PKG_DIR_NAME=make-${PKG_VERSION}
-PKG_TYPE=.tar.bz2
+PKG_TYPE=.tar.gz
 PKG_URLS=(
 	"https://ftp.gnu.org/gnu/make/make-${PKG_VERSION}${PKG_TYPE}"
 )
@@ -53,33 +53,41 @@ PKG_PRIORITY=main
 PKG_PATCHES=(
 	make/make-linebuf-mingw.patch
 	make/make-getopt.patch
+	make/make-4.3_undef-HAVE_STRUCT_DIRENT_D_TYPE.patch
+	make/make-4.4-timestamps.patch
 )
 
 #
 
-PKG_CONFIGURE_FLAGS=(
-	--host=$HOST
-	--build=$TARGET
-	--prefix=$PREFIX
-	--program-prefix=mingw32-
-	--enable-job-server
-	--without-guile
-	CFLAGS="\"$COMMON_CFLAGS\""
-	LDFLAGS="\"$COMMON_LDFLAGS -L$LIBS_DIR/lib\""
+PKG_EXECUTE_AFTER_PATCH=(
+	"sed 's/^set MAKE=gnumake/set MAKE=mingw32-make/' build_w32.bat > build_w32-mingw.bat"
+	"unix2dos build_w32-mingw.bat"
 )
 
 #
 
-PKG_MAKE_FLAGS=(
-	-j$JOBS
-	all
-)
+PKG_MAKE_PROG=build_make_bat
+PKG_MAKE_FLAGS=( dummy )
 
 #
 
-PKG_INSTALL_FLAGS=(
-	-j$JOBS
-	$( [[ $STRIP_ON_INSTALL == yes ]] && echo install-strip || echo install )
+PKG_EXECUTE_AFTER_INSTALL=(
+	install_make
 )
 
+#
+
+function build_make_bat {
+	cp -rf $SRCS_DIR/$PKG_NAME $CURR_BUILD_DIR/
+	cmd //c build_w32-mingw.bat --without-guile gcc
+}
+
+function install_make {
+	[[ $STRIP_ON_INSTALL == yes ]] && {
+		strip -s GccRel/mingw32-make.exe -o $PREFIX/bin/mingw32-make.exe
+	} || {
+		cp -f GccRel/mingw32-make.exe $PREFIX/bin/mingw32-make.exe
+	}
+}
+
 # **************************************************************************
diff --git a/scripts/mingw-compress.sh b/scripts/mingw-compress.sh
index 5fea105..1ff7114 100644
--- a/scripts/mingw-compress.sh
+++ b/scripts/mingw-compress.sh
@@ -67,7 +67,7 @@ function func_compress_mingw() {
 
 		[[ ! -f $ARCHIVE_NAME ]] && {
 			echo -n "---> \"$(basename $ARCHIVE_NAME)\" ... "
-			( cd $BUILDS_DIR && 7za a -t7z -mx=9 -mfb=64 -md=64m -ms=on \
+			( cd $BUILDS_DIR && 7za a -l -t7z -mx=9 -mfb=64 -md=64m -ms=on \
 				"$ARCHIVE_NAME" "$PREFIX" >/dev/null 2>&1 \
 			)
 			[[ $? == 0 ]] && {
diff --git a/scripts/mingw-w64-download.sh b/scripts/mingw-w64-download.sh
index 91c2d9a..b35e6f8 100644
--- a/scripts/mingw-w64-download.sh
+++ b/scripts/mingw-w64-download.sh
@@ -49,6 +49,11 @@ PKG_NAME=mingw-w64-${RUNTIME_VERSION}
 	PKG_URLS=(
 		"https://git.code.sf.net/p/mingw-w64/mingw-w64|branch:$RUNTIME_BRANCH|repo:$PKG_TYPE"
 	)
+	[[ $RUNTIME_BRANCH == master ]] && {
+		PKG_EXECUTE_AFTER_UNCOMPRESS=(
+			"git reset --hard 813b571407b1049a8f6edc87c0d69919775b21d4" # Reset to this commit hash for reproducible builds
+		)
+	}
 }
 
 PKG_DIR_NAME=mingw-w64${MINGW_PKG_DIR_VERSION_SUFFIX}
diff --git a/scripts/mpc.sh b/scripts/mpc.sh
index 0eb6419..3594359 100644
--- a/scripts/mpc.sh
+++ b/scripts/mpc.sh
@@ -35,7 +35,7 @@
 
 # **************************************************************************
 
-PKG_VERSION=1.2.1
+PKG_VERSION=1.3.1
 PKG_NAME=$BUILD_ARCHITECTURE-mpc-${PKG_VERSION}-$LINK_TYPE_SUFFIX
 PKG_DIR_NAME=mpc-${PKG_VERSION}
 PKG_TYPE=.tar.gz
diff --git a/scripts/mpfr.sh b/scripts/mpfr.sh
index 519e0c9..7e3ae8b 100644
--- a/scripts/mpfr.sh
+++ b/scripts/mpfr.sh
@@ -35,7 +35,7 @@
 
 # **************************************************************************
 
-PKG_VERSION=4.1.0
+PKG_VERSION=4.2.0
 PKG_NAME=$BUILD_ARCHITECTURE-mpfr-${PKG_VERSION}-$LINK_TYPE_SUFFIX
 PKG_DIR_NAME=mpfr-${PKG_VERSION}
 PKG_TYPE=.tar.xz
diff --git a/scripts/ncurses.sh b/scripts/ncurses.sh
index 02b4d44..f9f7f47 100644
--- a/scripts/ncurses.sh
+++ b/scripts/ncurses.sh
@@ -35,7 +35,7 @@
 
 # **************************************************************************
 
-PKG_VERSION=6.2
+PKG_VERSION=6.4
 PKG_NAME=ncurses-${PKG_VERSION}
 PKG_DIR_NAME=ncurses-${PKG_VERSION}
 PKG_TYPE=.tar.gz
@@ -49,6 +49,8 @@ PKG_PRIORITY=extra
 
 PKG_PATCHES=(
 	ncurses/work_around_changed_output_of_GNU_cpp_5.x.patch
+	ncurses/ncurses-6.3-pkgconfig.patch
+	ncurses/ncurses-6.3-cflags-private.patch
 )
 
 #
diff --git a/scripts/openssl.sh b/scripts/openssl.sh
index f2cc819..67e6755 100644
--- a/scripts/openssl.sh
+++ b/scripts/openssl.sh
@@ -35,7 +35,7 @@
 
 # **************************************************************************
 
-PKG_VERSION=1.1.1k
+PKG_VERSION=3.1.0
 PKG_NAME=openssl-${PKG_VERSION}
 PKG_DIR_NAME=openssl-${PKG_VERSION}
 PKG_TYPE=.tar.gz
@@ -50,13 +50,14 @@ PKG_CONFIGURE_SCRIPT=Configure
 #
 
 PKG_PATCHES=(
-	openssl/openssl-1.1.1-relocation.patch
+	openssl/openssl-3.0.8-relocation.patch
 )
 
 #
 
 PKG_CONFIGURE_FLAGS=(
 	--prefix=$LIBS_DIR
+	--libdir=$LIBS_DIR/lib
 	--openssldir=$LIBS_DIR/ssl
 	#
 	shared
diff --git a/scripts/python-3.sh b/scripts/python-3.sh
index 58c0605..70ce174 100644
--- a/scripts/python-3.sh
+++ b/scripts/python-3.sh
@@ -35,7 +35,7 @@
 
 # **************************************************************************
 
-PKG_VERSION=3.9.10
+PKG_VERSION=3.10.11
 PKG_NAME=Python-${PKG_VERSION}
 PKG_DIR_NAME=Python-${PKG_VERSION}
 PKG_TYPE=git
@@ -48,7 +48,7 @@ PKG_PRIORITY=extra
 #
 
 PKG_EXECUTE_AFTER_UNCOMPRESS=(
-	"git reset --hard 12d1cb5" # Reset to this commit hash for reproducible builds
+	"git reset --hard bb0b6e3c0d52fe6d4b3bea482f00b070275ce57f" # Reset to this commit hash for reproducible builds
 )
 
 #
@@ -101,10 +101,11 @@ PKG_CONFIGURE_FLAGS=(
 	# --with-tzpath=$LIBS_DIR/share/zoneinfo
 	--enable-optimizations
 	#
-	LIBFFI_INCLUDEDIR="$LIBSW_DIR/lib/libffi-$LIBFFI_VERSION/include"
-	CFLAGS="\"$COMMON_CFLAGS -D__USE_MINGW_ANSI_STDIO=1\""
+	PKG_CONFIG_PATH="$PREREQ_DIR/$BUILD_ARCHITECTURE-zlib-$LINK_TYPE_SUFFIX/lib/pkgconfig:$LIBS_DIR/lib/pkgconfig:$PKG_CONFIG_PATH"
+	CFLAGS="\"$COMMON_CFLAGS -D__USE_MINGW_ANSI_STDIO=1 -DNCURSES_STATIC\""
 	CPPFLAGS="\"$COMMON_CPPFLAGS $MY_CPPFLAGS\""
 	LDFLAGS="\"$COMMON_LDFLAGS -L$PREREQW_DIR/$BUILD_ARCHITECTURE-zlib-$LINK_TYPE_SUFFIX/lib -L$LIBSW_DIR/lib\""
+	LIBS="\"-lffi -lole32 -loleaut32 -luuid\""
 )
 
 #
diff --git a/scripts/readline.sh b/scripts/readline.sh
index 111bc32..fdfcec3 100644
--- a/scripts/readline.sh
+++ b/scripts/readline.sh
@@ -35,7 +35,7 @@
 
 # **************************************************************************
 
-PKG_VERSION=8.1
+PKG_VERSION=8.1.2
 PKG_NAME=readline-${PKG_VERSION}
 PKG_DIR_NAME=readline-${PKG_VERSION}
 PKG_TYPE=.tar.gz
@@ -48,7 +48,7 @@ PKG_PRIORITY=extra
 #
 
 PKG_PATCHES=(
-	readline/readline81-001.patch
+	#readline/readline81-001.patch
 	readline/Fixed-missing-POSIX_SIGNALS-check.patch
 )
 
diff --git a/scripts/sqlite.sh b/scripts/sqlite.sh
index 4233f82..e5f0248 100644
--- a/scripts/sqlite.sh
+++ b/scripts/sqlite.sh
@@ -35,12 +35,12 @@
 
 # **************************************************************************
 
-PKG_VERSION=3350500
+PKG_VERSION=3410200
 PKG_NAME=sqlite-${PKG_VERSION}
 PKG_DIR_NAME=sqlite-autoconf-${PKG_VERSION}
 PKG_TYPE=.tar.gz
 PKG_URLS=(
-	"https://www.sqlite.org/2021/sqlite-autoconf-${PKG_VERSION}${PKG_TYPE}"
+	"https://www.sqlite.org/2023/sqlite-autoconf-${PKG_VERSION}${PKG_TYPE}"
 )
 PKG_PRIORITY=extra
 
diff --git a/scripts/tcl.sh b/scripts/tcl.sh
index b3cc678..6e7db6d 100644
--- a/scripts/tcl.sh
+++ b/scripts/tcl.sh
@@ -35,7 +35,7 @@
 
 # **************************************************************************
 
-PKG_VERSION=8.6.11
+PKG_VERSION=8.6.12
 PKG_NAME=tcl${PKG_VERSION}
 PKG_DIR_NAME=tcl${PKG_VERSION}
 PKG_SUBDIR_NAME=win
diff --git a/scripts/tk.sh b/scripts/tk.sh
index 457bfd1..ac151e2 100644
--- a/scripts/tk.sh
+++ b/scripts/tk.sh
@@ -35,7 +35,7 @@
 
 # **************************************************************************
 
-PKG_VERSION=8.6.11
+PKG_VERSION=8.6.12
 PKG_NAME=tk${PKG_VERSION}
 PKG_DIR_NAME=tk${PKG_VERSION}
 PKG_SUBDIR_NAME=win
diff --git a/scripts/xz-utils.sh b/scripts/xz-utils.sh
index ad25a1d..210449c 100644
--- a/scripts/xz-utils.sh
+++ b/scripts/xz-utils.sh
@@ -35,7 +35,7 @@
 
 # **************************************************************************
 
-PKG_VERSION=5.2.5
+PKG_VERSION=5.4.3
 PKG_NAME=xz-${PKG_VERSION}
 PKG_DIR_NAME=xz-${PKG_VERSION}
 PKG_TYPE=.tar.xz
diff --git a/scripts/zlib.sh b/scripts/zlib.sh
index 505b5e6..f184a49 100644
--- a/scripts/zlib.sh
+++ b/scripts/zlib.sh
@@ -40,7 +40,7 @@ PKG_NAME=$PKG_ARCHITECTURE-zlib-${PKG_VERSION}-$LINK_TYPE_SUFFIX
 PKG_DIR_NAME=zlib-${PKG_VERSION}
 PKG_TYPE=.tar.gz
 PKG_URLS=(
-	"https://github.com/madler/zlib/archive/refs/tags/v${PKG_VERSION}${PKG_TYPE}"
+	"https://github.com/madler/zlib/releases/download/v${PKG_VERSION}/zlib-${PKG_VERSION}${PKG_TYPE}"
 )
 
 PKG_PRIORITY=prereq
